// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package db

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, chat_id, role, text, created_at) VALUES (?, ?, ?, ?, ?) RETURNING id, chat_id, role, text, created_at
`

type CreateMessageParams struct {
	ID        string
	ChatID    string
	Role      string
	Text      string
	CreatedAt int64
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ID,
		arg.ChatID,
		arg.Role,
		arg.Text,
		arg.CreatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.Role,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const getMessagesByChatID = `-- name: GetMessagesByChatID :many
SELECT id, chat_id, role, text, created_at FROM messages WHERE chat_id = ? ORDER BY created_at
`

func (q *Queries) GetMessagesByChatID(ctx context.Context, chatID string) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByChatID, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.Role,
			&i.Text,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
