// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chats.sql

package db

import (
	"context"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (id, name, updated_at) VALUES (?, ?, ?) RETURNING id, name, updated_at
`

type CreateChatParams struct {
	ID        string
	Name      string
	UpdatedAt int64
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, createChat, arg.ID, arg.Name, arg.UpdatedAt)
	var i Chat
	err := row.Scan(&i.ID, &i.Name, &i.UpdatedAt)
	return i, err
}

const getChat = `-- name: GetChat :one
SELECT id, name, updated_at FROM chats WHERE id = ?
`

func (q *Queries) GetChat(ctx context.Context, id string) (Chat, error) {
	row := q.db.QueryRowContext(ctx, getChat, id)
	var i Chat
	err := row.Scan(&i.ID, &i.Name, &i.UpdatedAt)
	return i, err
}

const getChats = `-- name: GetChats :many
SELECT id, name, updated_at FROM chats ORDER BY id
`

func (q *Queries) GetChats(ctx context.Context) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getChats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(&i.ID, &i.Name, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChat = `-- name: UpdateChat :exec
UPDATE chats SET name = ?, updated_at = ? WHERE id = ?
`

type UpdateChatParams struct {
	Name      string
	UpdatedAt int64
	ID        string
}

func (q *Queries) UpdateChat(ctx context.Context, arg UpdateChatParams) error {
	_, err := q.db.ExecContext(ctx, updateChat, arg.Name, arg.UpdatedAt, arg.ID)
	return err
}

const updateChatUpdatedAt = `-- name: UpdateChatUpdatedAt :exec
UPDATE chats SET updated_at = ? WHERE id = ?
`

type UpdateChatUpdatedAtParams struct {
	UpdatedAt int64
	ID        string
}

func (q *Queries) UpdateChatUpdatedAt(ctx context.Context, arg UpdateChatUpdatedAtParams) error {
	_, err := q.db.ExecContext(ctx, updateChatUpdatedAt, arg.UpdatedAt, arg.ID)
	return err
}
